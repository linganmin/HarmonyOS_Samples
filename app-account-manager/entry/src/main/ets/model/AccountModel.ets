/*
 * Copyright (c) 2022 Huawei Device Co., Ltd.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import Logger from './Logger';
import { appAccount, BusinessError } from '@kit.BasicServicesKit';

const TAG: string = '[AccountModel]';
const app: appAccount.AppAccountManager = appAccount.createAppAccountManager();

export class AccountModel {
  async addAccount(username: string) {
    try {
      await app.createAccount(username);
      Logger.info(TAG, `addAccount success`);
    } catch (error) {
      let err = error as BusinessError;
      Logger.error(TAG, `createAccount failed, error code=${err.code}, message=${err.message}`);
    }
    return;
  }

  async deleteAccount(username: string) {
    try {
      await app.removeAccount(username);
      Logger.info(TAG, `deleteAccount success`);
    } catch (error) {
      let err = error as BusinessError;
      Logger.error(TAG, `removeAccount failed, error code=${err.code}, message=${err.message}`);
    }
    return;
  }

  async setAccountCredential(username: string, credentialType: string, credential: string) {
    try {
      await app.setCredential(username, credentialType, credential);
      Logger.info(TAG, `setAccountCredential success`);
    } catch (error) {
      let err = error as BusinessError;
      Logger.error(TAG, `setCredential failed, error code=${err.code}, message=${err.message}`);
    }
    return;
  }

  async setAssociatedData(name: string, key: string, value: string) {
    try {
      await app.setCustomData(name, key, value);
      Logger.info(TAG, `setAssociatedData success`);
    } catch (error) {
      let err = error as BusinessError;
      Logger.error(TAG, `setCustomData failed, error code=${err.code}, message=${err.message}`);
    }
    return;
  }

  async getAccountCredential(name: string, credentialType: string) {
    let result = '';
    try {
      let result = await app.getCredential(name, credentialType);
      Logger.info(TAG, `getAccountCredential success`);
    } catch (error) {
      let err = error as BusinessError;
      Logger.error(TAG, `getCredential failed, error code=${err.code}, message=${err.message}`);
    }
    return result;
  }

  async getAssociatedData(name: string, key: string) {
    let result = '';
    try {
      let result = await app.getCustomData(name, key);
      Logger.info(TAG, `getAssociatedData success`);
    } catch (error) {
      let err = error as BusinessError;
      Logger.error(TAG, `getCustomData failed, error code=${err.code}, message=${err.message}`);
    }
    return result;
  }
}
