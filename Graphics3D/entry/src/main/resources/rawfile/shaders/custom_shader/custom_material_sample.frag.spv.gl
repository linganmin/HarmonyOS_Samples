#version 450

struct DefaultMaterialSingleMaterialStruct
{
    vec4 factors[15];
    uvec4 indices;
};

struct DefaultMaterialMaterialStruct
{
    DefaultMaterialSingleMaterialStruct material[64];
};

#ifndef SPIRV_CROSS_CONSTANT_ID_1
#define SPIRV_CROSS_CONSTANT_ID_1 0u
#endif
const uint CORE_MATERIAL_FLAGS = SPIRV_CROSS_CONSTANT_ID_1;
const uint _162 = (CORE_MATERIAL_FLAGS & 8u);
const bool _163 = (_162 == 8u);

struct DefaultMaterialTransformSingleMaterialStruct
{
    uvec4 _packed[15];
    uvec4 indices;
};

struct DefaultMaterialTransformMaterialStruct
{
    DefaultMaterialTransformSingleMaterialStruct material[64];
};

struct MyMaterialSampleStruct
{
    vec4 vec_1;
    float time;
    uint dof;
    uint motionBlur;
};

layout(std140) uniform s1_b2
{
    DefaultMaterialMaterialStruct uMaterialData;
} _s1_b2;

layout(std140) uniform s1_b3
{
    DefaultMaterialTransformMaterialStruct uMaterialTransformData;
} _s1_b3;

layout(std140) uniform s1_b4
{
    MyMaterialSampleStruct uMyData;
} _s1_b4;

uniform sampler2D s2_b0;

layout(location = 4) in vec4 inUv;
layout(location = 0) out vec4 outColor;

vec2 _1444;
float _1477;
float _1562;

void main()
{
    vec2 _336 = (inUv.xy - vec2(0.5)) * 2.0;
    vec3 _1434;
    vec2 _1462;
    vec2 _1470;
    _1470 = _1444;
    _1462 = _1444;
    _1434 = vec3(0.0);
    vec2 _1466;
    float _1472;
    vec3 _1490;
    vec2 _1516;
    float _1476;
    for (float _1433 = 0.0; _1433 < 2.0; _1476 = _1472, _1470 = _1466, _1462 = _1516, _1434 = _1490, _1433 += 1.0)
    {
        vec2 _372 = (inUv.xy + vec2(fract(_s1_b4.uMyData.time) * 500.0)) + vec2(_1433 * 31.3528308868408203125);
        float _1448;
        if (_s1_b4.uMyData.motionBlur != 0u)
        {
            _1448 = fma(fract(sin(dot(_372, vec2(1.86720001697540283203125, 1.37230002880096435546875))) * 5723.26220703125), 0.0500000007450580596923828125, _s1_b4.uMyData.time);
        }
        else
        {
            _1448 = _s1_b4.uMyData.time;
        }
        float _389 = -_1448;
        float _912 = floor(_389);
        vec3 _1368 = vec3(0.0, 1.0, _389);
        _1368.x = (mix(floor(fract(sin(_912) * 5723.26220703125) * 5.0), floor(fract(sin(_912 + 1.0) * 5723.26220703125) * 5.0), smoothstep(0.4000000059604644775390625, 0.60000002384185791015625, fract(_389))) - 2.0) * 0.5;
        float _411 = (-500.0) - _1448;
        float _943 = floor(_411);
        vec3 _1372 = _1368;
        _1372.y = fma(mix(floor(fract(sin(_943) * 5723.26220703125) * 5.0), floor(fract(sin(_943 + 1.0) * 5723.26220703125) * 5.0), smoothstep(0.4000000059604644775390625, 0.60000002384185791015625, fract(_411))), 0.5, 1.0);
        vec3 _423 = vec3(0.0, -0.5, (-0.5) - _1448) - _1372;
        vec3 _424 = normalize(_423);
        vec3 _429 = normalize(cross(_424, vec3(0.0, 1.0, 0.0)));
        float _440 = (-1000.0) - _1448;
        float _974 = floor(_440);
        float _475 = length(_423);
        vec3 _1449;
        if (_s1_b4.uMyData.dof != 0u)
        {
            float _504 = fract(sin(dot(_372 * 1.2000000476837158203125, vec2(1.86720001697540283203125, 1.37230002880096435546875))) * 5723.26220703125) * 6.283185482025146484375;
            vec2 _518 = _1372.xy + (((vec2(cos(_504), sin(_504)) * sqrt(fract(sin(dot(_372 * 1.10000002384185791015625, vec2(1.86720001697540283203125, 1.37230002880096435546875))) * 5723.26220703125))) * _475) * 0.02500000037252902984619140625);
            vec3 _1377 = _1372;
            _1377.x = _518.x;
            vec3 _1379 = _1377;
            _1379.y = _518.y;
            _1449 = _1379;
        }
        else
        {
            _1449 = _1372;
        }
        vec3 _527 = normalize((_1372 + (normalize(((_429 * _336.x) + (normalize(cross(_429, _424)) * _336.y)) + (_424 / vec3(tan(fma(fma(mix(floor(fract(sin(_974) * 5723.26220703125) * 2.0), floor(fract(sin(_974 + 1.0) * 5723.26220703125) * 2.0), smoothstep(0.4000000059604644775390625, 0.60000002384185791015625, fract(_440))), 2.0, -1.0), 20.0, 40.0) * 0.00872664712369441986083984375)))) * _475)) - _1449);
        vec2 _1467;
        _1467 = _1470;
        float _548;
        vec2 _577;
        bool _1455;
        vec2 _1458;
        float _1450 = 0.0;
        float _1473 = _1476;
        for (;;)
        {
            if (_1450 < 50.0)
            {
                _548 = (-fma(_1450, 0.0500000007450580596923828125, _1449.y)) / _527.y;
                vec2 _556 = _1449.xz + (_527.xz * _548);
                vec2 _1384 = _556;
                _1384.x = fma(fract(sin(_1450) * 5723.26220703125), 500.0, _556.x);
                float _567 = _1450 * 2.0;
                float _1023 = sin(_567);
                float _1025 = cos(_567);
                vec2 _571 = _1384 * mat2(vec2(_1025, _1023), vec2(-_1023, _1025));
                float _575 = _571.x;
                _577 = vec2(_1450, floor(_575));
                float _581 = fract(_575) - 0.5;
                float _589 = fma(fract(sin(dot(_577, vec2(1.86720001697540283203125, 1.37230002880096435546875))) * 5723.26220703125), 500.0, _571.y);
                float _1069 = floor(_589);
                float _1071 = fract(_589);
                float _599 = fma(mix(_1071 * fma(fract(sin(_1069) * 5723.26220703125), 2.0, -1.0), (_1071 - 1.0) * fma(fract(sin(_1069 + 1.0) * 5723.26220703125), 2.0, -1.0), (_1071 * _1071) * fma(-2.0, _1071, 3.0)) * (-0.939999997615814208984375), smoothstep(0.2199999988079071044921875, 0.2800000011920928955078125, abs(fract(_1448 * 0.10999999940395355224609375) - 0.5)), _581);
                vec2 _1395 = vec2(_581, _589);
                _1395.x = _599;
                bool _602 = _548 > 0.0;
                bool _609;
                if (_602)
                {
                    _609 = abs(_599) < 0.02999999932944774627685546875;
                }
                else
                {
                    _609 = _602;
                }
                if (_609)
                {
                    _1472 = _548;
                    _1466 = _577;
                    _1458 = _1395;
                    _1455 = true;
                    break;
                }
                _1450 += 1.0;
                _1473 = _548;
                _1467 = _577;
                continue;
            }
            else
            {
                _1472 = _1473;
                _1466 = _1467;
                _1458 = _1462;
                _1455 = false;
                break;
            }
        }
        if (_1455)
        {
            vec3 _640 = normalize(vec3(_1458.x, sqrt(fma(-_1458.x, _1458.x, 0.000899999984540045261383056640625)), 0.0));
            float _647 = _1458.y + 9.9999997473787516355514526367188e-05;
            float _1113 = smoothstep(0.2199999988079071044921875, 0.2800000011920928955078125, abs(fract(_1448 * 0.10999999940395355224609375) - 0.5));
            float _1125 = floor(_647);
            float _1127 = fract(_647);
            float _655 = _1458.y - 9.9999997473787516355514526367188e-05;
            float _1181 = floor(_655);
            float _1183 = fract(_655);
            float _672 = fma(_1466.x, -2.0, atan(fma(mix(_1127 * fma(fract(sin(_1125) * 5723.26220703125), 2.0, -1.0), (_1127 - 1.0) * fma(fract(sin(_1125 + 1.0) * 5723.26220703125), 2.0, -1.0), (_1127 * _1127) * fma(-2.0, _1127, 3.0)) * 0.939999997615814208984375, _1113, -((mix(_1183 * fma(fract(sin(_1181) * 5723.26220703125), 2.0, -1.0), (_1183 - 1.0) * fma(fract(sin(_1181 + 1.0) * 5723.26220703125), 2.0, -1.0), (_1183 * _1183) * fma(-2.0, _1183, 3.0)) * 0.939999997615814208984375) * _1113)) * 5000.0));
            float _1216 = sin(_672);
            float _1218 = cos(_672);
            vec2 _677 = _640.xz * mat2(vec2(_1218, _1216), vec2(-_1216, _1218));
            vec3 _1404 = _640;
            _1404.x = _677.x;
            vec3 _1406 = _1404;
            _1406.z = _677.y;
            float _720 = fract(fma(_1458.y, 0.02999999932944774627685546875, _1448 * (-0.20000000298023223876953125))) - 0.5;
            vec2 _1409 = _1458;
            _1409.y = _720;
            float _736 = _1448 + fract(sin(dot(_1466, vec2(1.86720001697540283203125, 1.37230002880096435546875))) * 5723.26220703125);
            _1516 = _1409;
            _1490 = _1434 + ((((vec3(1.0) * fma(1.5, max(dot(_1406, vec3(-0.8703882694244384765625, 0.348155319690704345703125, -0.348155319690704345703125)), 0.0) + pow(max(dot(reflect(vec3(-0.8703882694244384765625, 0.348155319690704345703125, -0.348155319690704345703125), _1406), _527), 0.0), 20.0), 0.20000000298023223876953125)) + vec3(smoothstep(0.00999999977648258209228515625, 0.0, abs(_720)) * 3.0)) + vec3((step(fract(sin(dot((_1466 * 1.10000002384185791015625) + vec2(floor(_736)), vec2(1.86720001697540283203125, 1.37230002880096435546875))) * 5723.26220703125), 0.0500000007450580596923828125) * step(fract(_736 * 3.0), 0.800000011920928955078125)) * 3.0)) * exp(fma((-_1472) * _1472, 0.100000001490116119384765625, (_1466.x * _1466.x) * (-0.001000000047497451305389404296875))));
        }
        else
        {
            _1516 = _1458;
            _1490 = _1434;
        }
    }
    uint _1301 = floatBitsToUint(_s1_b2.uMaterialData.material[0].factors[11].y);
    vec2 _1436;
    if (((_1301 >> uint(16)) & 1u) == 1u)
    {
        _1436 = inUv.zw;
    }
    else
    {
        _1436 = inUv.xy;
    }
    vec2 _1445;
    if (_163 && (((_1301 & 65535u) & 1u) == 1u))
    {
        vec4 _1531 = vec4(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[0u].x), unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[0u].y));
        _1445 = vec2(dot(_1531.xy, _1436), dot(_1531.zw, _1436)) + vec4(unpackHalf2x16(_s1_b3.uMaterialTransformData.material[0]._packed[0u].z), _1562, _1562).xy;
    }
    else
    {
        _1445 = _1436;
    }
    outColor = vec4(pow((_1434 * vec3(0.5)) * _s1_b4.uMyData.vec_1.xyz, vec3(0.4545454680919647216796875)) * texture(s2_b0, _1445).xyz, _s1_b4.uMyData.vec_1.w);
}

